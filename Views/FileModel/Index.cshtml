@{
    ViewData["Title"] = "Editor";
    Layout = null;
    var isReadOnly = ViewBag.isReadOnly;
}
<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="utf-8" />
    <title>Code Editor</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.43.0/min/vs/loader.min.js"></script>
    <style>
        html, body {
            margin: 0;
            padding: 0;
            height: 100%;
            font-family: sans-serif;
        }
        #header {
            height: 40px;
            background: #333;
            display: flex;
            align-items: center;
            padding: 0 15px;
            border-bottom: 1px solid #222;
        }
        #container {
            display: flex;
            height: calc(100vh - 40px);
        }
        #sidebar {
            width: 250px;
            background: #252526;
            color: #ccc;
            overflow-y: auto;
            border-right: 1px solid #1e1e1e;
        }
        #editor {
            flex: 2;
            height: 100%;
        }
        #right-panel {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: #1e1e1e;
            @if(isReadOnly){
                @:display: none !important;
            }
        }
        #output {
            flex: 1;
            color: #d4d4d4;
            padding: 10px;
            overflow: auto;
            font-family: monospace;
            border-bottom: 1px solid #333;
        }
        #bytecode {
            flex: 1;
            color: #d4d4d4;
            padding: 10px;
            overflow: auto;
            font-family: monospace;
        }
        .panel-header {
            padding: 5px 10px;
            background: #333;
            font-weight: bold;
            border-bottom: 1px solid #222;
        }
        .success-text {
            color: #4CAF50;
            font-weight: bold;
        }
        .error-text {
            color: #F44336;
            font-weight: bold;
        }
        pre {
            white-space: pre-wrap;
            margin: 0;
        }
        button {
            margin-right: 10px;
            padding: 6px 12px;
            font-size: 14px;
            background: #444;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            height: 30px;
            display: flex;
            align-items: center;
        }
        button:hover {
            background: #555;
        }
        .file-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        .file-item {
            padding: 8px 15px;
            cursor: pointer;
            border-bottom: 1px solid #333;
        }
        .file-item:hover {
            background: #2a2d2e;
        }
        .file-item.active {
            background: #37373d;
        }
        .sidebar-header {
            padding: 10px 15px;
            background: #333;
            font-weight: bold;
            border-bottom: 1px solid #222;
        }
        .readonly-message {
            background: #333;
            text-align: center;
            margin-top: 20px;
            font-size: 16px;
            color: #F44336;
        }
    </style>
</head>
<body>
    <div id="header">
        @if(!isReadOnly){
        <button onclick="save()">Save</button>
        <button onclick="compile()">Compile</button>
        }
        <button onclick="exit()">Exit</button>
    </div>
    <div id="container">
        <div id="sidebar">
            <div class="sidebar-header">Project Files</div>
            <ul class="file-list" id="fileList"></ul>
        </div>
        <div id="editor"></div>
        @if(!isReadOnly){
        <div id="right-panel">
            <div id="output">
                <div class="panel-header">Compilation results</div>
                <pre id="compileResult">(not started)</pre>
            </div>
            <div id="bytecode">
                <div class="panel-header">Bytecode</div>
                <pre id="bytecodeResult">(no bytecode generated)</pre>
            </div>
        </div>
        }
        else{
            <div class="readonly-message">
                You are viewing this file in read-only mode
            </div>
        }
    </div>

    <script>
        let editor;
        let currentFileId = '@ViewBag.FileId';
        const isReadOnly = @isReadOnly.ToString().ToLower();

        const fileContent = `@Html.Raw(System.Text.Encodings.Web.JavaScriptEncoder.Default.Encode(ViewBag.FileContent))`;

        document.addEventListener('DOMContentLoaded', async () => {
            await loadProjectFiles();
            highlightCurrentFile();
        });

        async function loadProjectFiles() {
            try {
                const response = await fetch('/FileModel/GetProjectFiles');
                const files = await response.json();
                
                const fileList = document.getElementById('fileList');
                fileList.innerHTML = '';
                
                files.forEach(file => {
                    const li = document.createElement('li');
                    li.className = 'file-item';
                    if (file.id == currentFileId) {
                        li.classList.add('active');
                    }
                    li.textContent = file.name;
                    li.onclick = () => openFile(file.id, file.name);
                    fileList.appendChild(li);
                });
            } catch (error) {
                console.error('Error loading project files:', error);
            }
        }

        function highlightCurrentFile() {
            const fileItems = document.querySelectorAll('.file-item');
            fileItems.forEach(item => {
                item.classList.remove('active');
                if (item.textContent === '@ViewBag.FileName') {
                    item.classList.add('active');
                }
            });
        }

        async function openFile(fileId, fileName) {
            try {
                const response = await fetch(`/FileModel/GetFileContent/${fileId}`);
                const fileData = await response.json();
                
                editor.setValue(fileData.content);
                currentFileId = fileId;

                document.querySelectorAll('.file-item').forEach(item => {
                    item.classList.remove('active');
                });

                const fileItems = document.querySelectorAll('.file-item');
                fileItems.forEach(item => {
                    if(item.textContent === fileName){
                        item.classList.add('active');
                    }
                });

                
                history.pushState(null, '', `/Editor/Index/${fileId}`);
            } catch (error) {
                console.error('Error opening file:', error);
                alert('Error opening file');
            }
        }

        require.config({ paths: { vs: 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.43.0/min/vs' } });
        require(['vs/editor/editor.main'], function () {
            monaco.languages.register({ id: 'cz' });

            monaco.languages.setMonarchTokensProvider('cz', {
                ignoreCase: true,
                defaultToken: '',
                tokenizer: {
                    root: [
                        [/###/, "hash"],
                        [/[a-zA-Z_][a-zA-Z0-9_]*(?=\s*\()/, 'function'],
                        [/\$[a-zA-Z_][a-zA-Z0-9_]*/, "variable.parameter"],
                        [/\b(JESLI|POKI)\b/, "keyword"],
                        [/\b(NADAJ|NDODAJ|NODEMIJ|NMNOZ|NDZIEL|NRESZTA)\b/, "keyword"],
                        [/\b(DODAJ|ODEMIJ|MNOZ|DZIEL|RESZTA)\b/, "operator"],
                        [/\b(NIE|I|LUB)\b/, "operator"],
                        [/\b(ROWNE|ROZNE|WIEKSZE|MNIEJSZE|WIEKSZE_BADZ_ROWNE|MNIEJSZE_BADZ_ROWNE)\b/, "operator"],
                        [/\b(SREDNIK|LNAWIAS|PNAWIAS|LSPIECIE|ESPIECIE)\b/, "delimiter"],
                        [/\bZMIENNA\b/, "variable"],
                        [/\/\/.*$/, "comment"],
                        [/\/\*.*\*\//, "comment"],
                        [/\d+/, "number"],
                        [/".*?"/, "string"],
                        [/[a-zA-Z_][a-zA-Z0-9_]*/, "identifier"]
                    ]
                }
            });

            monaco.editor.defineTheme('customTheme', {
                base: 'vs-dark',
                inherit: true,
                rules: [
                    { token: 'hash', foreground: 'ff0000', fontStyle: 'bold'},
                    { token: 'function', foreground: '4EC9B0', fontStyle: 'bold' },
                    { token: 'variable.parameter', foreground: '9b59b6', fontStyle: 'bold' },
                    { token: 'keyword', foreground: '569cd6' },
                    { token: 'operator', foreground: 'd4d4d4' },
                    { token: 'delimiter', foreground: 'd4d4d4' },
                    { token: 'variable', foreground: '9cdcfe' },
                    { token: 'comment', foreground: '6a9955' },
                    { token: 'number', foreground: 'b5cea8' },
                    { token: 'string', foreground: 'ce9178' },
                    { token: 'identifier', foreground: 'd4d4d4' }
                ],
                colors: {
                    'editor.background': '#1e1e1e'
                }
            });

            monaco.languages.registerCompletionItemProvider('cz', {
                triggerCharacters: ['.'],
                provideCompletionItems: () => {
                    const keywords = [
                        "JESLI", "POKI", "NADAJ", "NDODAJ", "NODEMIJ", "NMNOZ", "NDZIEL", "NRESZTA",
                        "DODAJ", "ODEMIJ", "MNOZ", "DZIEL", "RESZTA",
                        "ROWNE", "ROZNE", "WIEKSZE", "MNIEJSZE", "WIEKSZE_BADZ_ROWNE", "MNIEJSZE_BADZ_ROWNE",
                        "NIE", "I", "LUB", "ZMIENNA",
                        "SREDNIK", "LNAWIAS", "PNAWIAS", "LSPIECIE", "ESPIECIE"
                    ];

                    return {
                        suggestions: keywords.map(word => ({
                            label: word,
                            kind: monaco.languages.CompletionItemKind.Keyword,
                            insertText: word,
                            filterText: word.toLowerCase(),
                            sortText: word.toLowerCase()
                        }))
                    };
                }
            });

            editor = monaco.editor.create(document.getElementById('editor'), {
                value: fileContent,
                language: 'cz',
                theme: 'customTheme',
                automaticLayout: true,
                readOnly: isReadOnly
            });
        });
            async function save() {
                const content = editor.getValue();
                const response = await fetch(`/FileModel/Save/${currentFileId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(content)
                });

                if (response.ok) {
                    alert("Zapisano!");
                    await loadProjectFiles();
                } else {
                    alert("Błąd zapisu!");
                }
            }

            async function compile() {
                const compileResult = document.getElementById("compileResult");
                const bytecodeResult = document.getElementById("bytecodeResult");
                const bytecodeHeader = document.querySelector("#bytecode .panel-header");
                
                compileResult.innerHTML = "Compiling...";
                bytecodeResult.innerHTML = "Generating bytecode...";
                bytecodeHeader.textContent = "Bytecode"; 
                
                try {
                    const response = await fetch(`/FileModel/Compile/${currentFileId}`, {
                        method: 'POST'
                    });

                    const data = await response.json();
                    if (data.success) {
                        compileResult.innerHTML = `<span class="success-text">Success:</span>\n${data.output}`;
                        bytecodeResult.innerHTML = data.poczet || "(no bytecode generated)";
                        bytecodeHeader.textContent = "Bytecode"; 
                    } else {
                        compileResult.innerHTML = `<span class="success-text"></span>\n${data.output}`;
                        compileResult.innerHTML += `<span class="error-text">Error:</span>${data.errors}`;
                        bytecodeResult.innerHTML = data.errorFile || data.errors; 
                        bytecodeHeader.textContent = "Error details"; 
                    }
                } catch (error) {
                    compileResult.innerHTML = `<span class="error-text">Fatal Error:</span>${error.message}`;
                    bytecodeResult.innerHTML = "(bytecode generation failed)";
                    bytecodeHeader.textContent = "Error details"; 
                }
            }
        

        function exit() {
            window.location.href = '/Project/Index';
        }
    </script>
</body>
</html>